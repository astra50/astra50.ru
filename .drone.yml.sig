eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIGRlcHRoOiAxCgogIGNoZWNrOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gfAogICAgICAgIGNhdCA8PCBMaXN0RU9GCiAgICAgICAgNThjMjY0NGM5MjhjYzQ3NzJlNDU5NzNlMmUzZDBkYTggIC5kcm9uZS5lbnYKICAgICAgICA2MTY5YTE3YWEyOTgxYjlkM2UwNzYxZDhjZTE3ZGY3ZSAgLmRyb25lLnNzaAogICAgICAgIGVhNzRhNmUyNGYxYmFhYTRlYTBhZmQyYmNmN2Y2ODIwICBkb2NrZXIvZG9ja2VyLWVudHJ5cG9pbnQuc2gKICAgICAgICBjZGRhODBjYjI5NjZiOTY5NjUzNTdiOWM1NzZiZDQ5MiAgZG9ja2VyL0RvY2tlcmZpbGUKICAgICAgICBMaXN0RU9GIHwgbWQ1c3VtIC13YyAtCgogIGJ1aWxkOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBidWlsZCAtdCAiJElNQUdFX0JVSUxEIgogICAgICAgIC0tZmlsZSBkb2NrZXIvRG9ja2VyZmlsZQogICAgICAgIC0tbGFiZWwgYnJhbmNoPSIkRFJPTkVfQ09NTUlUX0JSQU5DSCIKICAgICAgICAtLWJ1aWxkLWFyZyBHSVRIVUJfQVVUSF9UT0tFTj0iJEdJVEhVQl9BVVRIX1RPS0VOIiAuCgogIHRlc3Q6CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtID4tCiAgICAgICAgZG9ja2VyIHJ1biAtLXJtIC0tbmV0d29yayAiY29udGFpbmVyOiRIT1NUTkFNRSIKICAgICAgICAtZSBTWU1GT05ZX0VOVj10ZXN0CiAgICAgICAgLWUgU1lNRk9OWV9ERUJVRz0wCiAgICAgICAgIiRJTUFHRV9CVUlMRCIKCiAgcHVibGlzaDoKICAgIGltYWdlOiBkb2NrZXIKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICAgIGNvbW1hbmRzOgogICAgICAtIHNvdXJjZSAuZHJvbmUuZW52CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11IiRIVUJfTE9HSU4iIC1wIiRIVUJfUEFTU1dPUkQiIHJlZ2lzdHJ5LmdpdGxhYi5jb20KICAgICAgLSBkb2NrZXIgdGFnICIkSU1BR0VfQlVJTEQiICIkSU1BR0VfUFVTSCIKICAgICAgLSBkb2NrZXIgcHVzaCAiJElNQUdFX1BVU0giID4gL2Rldi9udWxsCiAgICAgIC0gPisKICAgICAgICBpZiBbICJtYXN0ZXIiID09ICIkRFJPTkVfQ09NTUlUX0JSQU5DSCIgXTsgdGhlbgogICAgICAgICAgZG9ja2VyIHJtaSAtLWZvcmNlICIkSU1BR0VfUFVTSCIKCiAgICAgICAgICBkb2NrZXIgdGFnICIkSU1BR0VfQlVJTEQiICIkSU1BR0VfTEFURVNUIgogICAgICAgICAgZG9ja2VyIHB1c2ggIiRJTUFHRV9MQVRFU1QiID4gL2Rldi9udWxsCiAgICAgICAgZmkKICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCgogIGNsZWFuOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSA-KwogICAgICAgIGlmIFsgInN1Y2Nlc3MiID09ICIkRFJPTkVfQlVJTERfU1RBVFVTIiBdICYmIFsgInB1c2giID09ICIkRFJPTkVfQlVJTERfRVZFTlQiIF07IHRoZW4KICAgICAgICAgIChkb2NrZXIgcm1pIGBkb2NrZXIgaW1hZ2VzIC1xIC0tZmlsdGVyIGJlZm9yZT0iJElNQUdFX0JVSUxEIiAtLWZpbHRlciBsYWJlbD0iYnJhbmNoPSREUk9ORV9DT01NSVRfQlJBTkNIIiAiJElNQUdFImApCiAgICAgICAgZmkKICAgICAgLSBkb2NrZXIgcm1pIC0tZm9yY2UgIiRJTUFHRV9CVUlMRCIKICAgIHdoZW46CiAgICAgIHN0YXR1czogWyBmYWlsdXJlLCBzdWNjZXNzIF0KCiAgZGVwbG95OgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSBzb3VyY2UgLmRyb25lLnNzaAogICAgICAtIHNzaCBwcmVtaWVyQGFzdHJhNTAucnUgZG9ja2VyIHNlcnZpY2UgdXBkYXRlIC0taW1hZ2UgIiRJTUFHRV9QVVNIIiBhc3RyYTUwX2FwcAogICAgICAtIGRvY2tlciBybWkgYGRvY2tlciBpbWFnZXMgLXEgLS1maWx0ZXIgImJlZm9yZT0kSU1BR0VfUFVTSCIgIiRJTUFHRSJgIDI-IC9kZXYvbnVsbCB8fCB0cnVlCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgoKc2VydmljZXM6CiAgbXlzcWw6CiAgICBpbWFnZTogbWFyaWFkYgogICAgZW52aXJvbm1lbnQ6CiAgICAgIE1ZU1FMX0RBVEFCQVNFOiBkYgogICAgICBNWVNRTF9BTExPV19FTVBUWV9QQVNTV09SRDogdHJ1ZQo.Q9WY1Qxp0Ds7jtKfKzyIkzKTWNKUryufF8j3_iPr-yo