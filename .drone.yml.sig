eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2xvbmU6CiAgICBpbWFnZTogcGx1Z2lucy9naXQKICAgIGRlcHRoOiAxCgogIGNoZWNrOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gfAogICAgICAgIGNhdCA8PCBMaXN0RU9GCiAgICAgICAgNThjMjY0NGM5MjhjYzQ3NzJlNDU5NzNlMmUzZDBkYTggIC5kcm9uZS5lbnYKICAgICAgICBjZTc1ODc5MzNmMjMwYTU3ZDlkMDAzYjJkMzhhNTE5MiAgLmRyb25lLnNzaAogICAgICAgIDNkOTI2OTAyYzZkYjAyZmNjNmQxN2Y0ODdlZDZjYzc3ICBkb2NrZXIvZG9ja2VyLWVudHJ5cG9pbnQuc2gKICAgICAgICBjZGRhODBjYjI5NjZiOTY5NjUzNTdiOWM1NzZiZDQ5MiAgZG9ja2VyL0RvY2tlcmZpbGUKICAgICAgICBMaXN0RU9GIHwgbWQ1c3VtIC13YyAtCgogIGJ1aWxkOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBidWlsZCAtdCAiJElNQUdFX0JVSUxEIgogICAgICAgIC0tZmlsZSBkb2NrZXIvRG9ja2VyZmlsZQogICAgICAgIC0tbGFiZWwgYnJhbmNoPSIkRFJPTkVfQ09NTUlUX0JSQU5DSCIKICAgICAgICAtLWJ1aWxkLWFyZyBHSVRIVUJfQVVUSF9UT0tFTj0iJEdJVEhVQl9BVVRIX1RPS0VOIiAuCgogIHRlc3Q6CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtIHdoaWxlICEgbmMgLXogMTI3LjAuMC4xIDMzMDY7IGRvIHNsZWVwIDE7IGRvbmUKICAgICAgLSA-LQogICAgICAgIGRvY2tlciBydW4gLS1ybSAtLW5ldHdvcmsgImNvbnRhaW5lcjokSE9TVE5BTUUiCiAgICAgICAgLWUgQVBQX0VOVj10ZXN0CiAgICAgICAgLWUgQVBQX0RFQlVHPTAKICAgICAgICAiJElNQUdFX0JVSUxEIgoKICBwdWJsaXNoOgogICAgaW1hZ2U6IGRvY2tlcgogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICAgY29tbWFuZHM6CiAgICAgIC0gc291cmNlIC5kcm9uZS5lbnYKICAgICAgLSBkb2NrZXIgbG9naW4gLXUiJEhVQl9MT0dJTiIgLXAiJEhVQl9QQVNTV09SRCIgcmVnaXN0cnkuZ2l0bGFiLmNvbQogICAgICAtIGRvY2tlciB0YWcgIiRJTUFHRV9CVUlMRCIgIiRJTUFHRV9QVVNIIgogICAgICAtIGRvY2tlciBwdXNoICIkSU1BR0VfUFVTSCIgPiAvZGV2L251bGwKICAgICAgLSA-KwogICAgICAgIGlmIFsgIm1hc3RlciIgPT0gIiREUk9ORV9DT01NSVRfQlJBTkNIIiBdOyB0aGVuCiAgICAgICAgICBkb2NrZXIgcm1pIC0tZm9yY2UgIiRJTUFHRV9QVVNIIgoKICAgICAgICAgIGRvY2tlciB0YWcgIiRJTUFHRV9CVUlMRCIgIiRJTUFHRV9MQVRFU1QiCiAgICAgICAgICBkb2NrZXIgcHVzaCAiJElNQUdFX0xBVEVTVCIgPiAvZGV2L251bGwKICAgICAgICBmaQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKCiAgY2xlYW46CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtID4rCiAgICAgICAgaWYgWyAic3VjY2VzcyIgPT0gIiREUk9ORV9CVUlMRF9TVEFUVVMiIF0gJiYgWyAicHVzaCIgPT0gIiREUk9ORV9CVUlMRF9FVkVOVCIgXTsgdGhlbgogICAgICAgICAgKGRvY2tlciBybWkgYGRvY2tlciBpbWFnZXMgLXEgLS1maWx0ZXIgYmVmb3JlPSIkSU1BR0VfQlVJTEQiIC0tZmlsdGVyIGxhYmVsPSJicmFuY2g9JERST05FX0NPTU1JVF9CUkFOQ0giICIkSU1BR0UiYCkKICAgICAgICBmaQogICAgICAtIGRvY2tlciBybWkgLS1mb3JjZSAiJElNQUdFX0JVSUxEIgogICAgd2hlbjoKICAgICAgc3RhdHVzOiBbIGZhaWx1cmUsIHN1Y2Nlc3MgXQoKICBkZXBsb3k6CiAgICBpbWFnZTogZG9ja2VyCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSBzb3VyY2UgLmRyb25lLmVudgogICAgICAtIHNvdXJjZSAuZHJvbmUuc3NoCiAgICAgIC0gc3NoIHByZW1pZXJAYXN0cmE1MC5ydSBkb2NrZXIgc2VydmljZSB1cGRhdGUgLS1pbWFnZSAiJElNQUdFX1BVU0giIGFzdHJhNTBfYXBwCiAgICAgIC0gZG9ja2VyIHJtaSBgZG9ja2VyIGltYWdlcyAtcSAtLWZpbHRlciAiYmVmb3JlPSRJTUFHRV9QVVNIIiAiJElNQUdFImAgMj4gL2Rldi9udWxsIHx8IHRydWUKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCgpzZXJ2aWNlczoKICBteXNxbDoKICAgIGltYWdlOiBtYXJpYWRiCiAgICBlbnZpcm9ubWVudDoKICAgICAgTVlTUUxfREFUQUJBU0U6IGRiCiAgICAgIE1ZU1FMX0FMTE9XX0VNUFRZX1BBU1NXT1JEOiB0cnVlCg.0NtEyOEbVjI4cDS8bo2kp0myBkCqbKY443OXX9bK0Js